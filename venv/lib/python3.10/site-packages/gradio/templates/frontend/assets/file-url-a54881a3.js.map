{"version":3,"file":"file-url-a54881a3.js","sources":["../../../../js/wasm/network/host.ts","../../../../js/wasm/src/http.ts","../../../../js/wasm/svelte/file-url.ts"],"sourcesContent":["export function is_self_host(url: URL): boolean {\n\treturn (\n\t\turl.host === window.location.host ||\n\t\turl.host === \"localhost:7860\" ||\n\t\turl.host === \"127.0.0.1:7860\" || // Ref: https://github.com/gradio-app/gradio/blob/v3.32.0/js/app/src/Index.svelte#L194\n\t\turl.host === \"lite.local\" // A special hostname set when the endpoint is a local file (`file:/*`). See `determine_protocol()` in `client/js/src/utils.ts`\n\t);\n}\n","export interface HttpRequest {\n\tmethod: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\";\n\tpath: string;\n\tquery_string: string;\n\theaders: Record<string, string>;\n\tbody?: Uint8Array;\n}\nexport interface HttpResponse {\n\tstatus: number;\n\theaders: Record<string, string>;\n\tbody: Uint8Array;\n}\n\n// Inspired by https://github.com/rstudio/shinylive/blob/v0.1.2/src/messageporthttp.ts\nexport function headersToASGI(\n\theaders: HttpRequest[\"headers\"]\n): [string, string][] {\n\tconst result: [string, string][] = [];\n\tfor (const [key, value] of Object.entries(headers)) {\n\t\tresult.push([key, value]);\n\t}\n\treturn result;\n}\n\nexport function uint8ArrayToString(buf: Uint8Array): string {\n\tlet result = \"\";\n\tfor (let i = 0; i < buf.length; i++) {\n\t\tresult += String.fromCharCode(buf[i]);\n\t}\n\treturn result;\n}\n\nexport function asgiHeadersToRecord(headers: any): Record<string, string> {\n\theaders = headers.map(([key, val]: [Uint8Array, Uint8Array]) => {\n\t\treturn [uint8ArrayToString(key), uint8ArrayToString(val)];\n\t});\n\treturn Object.fromEntries(headers);\n}\n\nexport function getHeaderValue(\n\theaders: HttpRequest[\"headers\"],\n\tkey: string\n): string | undefined {\n\t// The keys in `headers` are case-insensitive.\n\tconst unifiedKey = key.toLowerCase();\n\tfor (const [k, v] of Object.entries(headers)) {\n\t\tif (k.toLowerCase() === unifiedKey) {\n\t\t\treturn v;\n\t\t}\n\t}\n}\n\nexport function logHttpReqRes(\n\trequest: HttpRequest,\n\tresponse: HttpResponse\n): void {\n\tif (Math.floor(response.status / 100) !== 2) {\n\t\tlet bodyText: string;\n\t\tlet bodyJson: unknown;\n\t\ttry {\n\t\t\tbodyText = new TextDecoder().decode(response.body);\n\t\t} catch (e) {\n\t\t\tbodyText = \"(failed to decode body)\";\n\t\t}\n\t\ttry {\n\t\t\tbodyJson = JSON.parse(bodyText);\n\t\t} catch (e) {\n\t\t\tbodyJson = \"(failed to parse body as JSON)\";\n\t\t}\n\t\tconsole.error(\"Wasm HTTP error\", {\n\t\t\trequest,\n\t\t\tresponse,\n\t\t\tbodyText,\n\t\t\tbodyJson\n\t\t});\n\t}\n}\n","import { getWorkerProxyContext } from \"./context\";\nimport { is_self_host } from \"../network/host\";\nimport { getHeaderValue } from \"../src/http\";\n\ntype MediaSrc = string | undefined | null;\n\nexport async function resolve_wasm_src(src: MediaSrc): Promise<MediaSrc> {\n\tif (src == null) {\n\t\treturn src;\n\t}\n\n\tconst url = new URL(src);\n\tif (!is_self_host(url)) {\n\t\t// `src` is not accessing a local server resource, so we don't need to proxy this request to the Wasm worker.\n\t\treturn src;\n\t}\n\tif (url.protocol !== \"http:\" && url.protocol !== \"https:\") {\n\t\t// `src` can be a data URL.\n\t\treturn src;\n\t}\n\n\tconst maybeWorkerProxy = getWorkerProxyContext();\n\tif (maybeWorkerProxy == null) {\n\t\t// We are not in the Wasm env. Just use the src as is.\n\t\treturn src;\n\t}\n\n\tconst path = url.pathname;\n\treturn maybeWorkerProxy\n\t\t.httpRequest({\n\t\t\tmethod: \"GET\",\n\t\t\tpath,\n\t\t\theaders: {},\n\t\t\tquery_string: \"\"\n\t\t})\n\t\t.then((response) => {\n\t\t\tif (response.status !== 200) {\n\t\t\t\tthrow new Error(`Failed to get file ${path} from the Wasm worker.`);\n\t\t\t}\n\t\t\tconst blob = new Blob([response.body], {\n\t\t\t\ttype: getHeaderValue(response.headers, \"content-type\")\n\t\t\t});\n\t\t\tconst blobUrl = URL.createObjectURL(blob);\n\t\t\treturn blobUrl;\n\t\t});\n}\n"],"names":[],"mappings":";;AAAO,SAAS,aAAa,GAAmB,EAAA;AAC/C,EACC,OAAA,GAAA,CAAI,SAAS,MAAO,CAAA,QAAA,CAAS,QAC7B,GAAI,CAAA,IAAA,KAAS,gBACb,IAAA,GAAA,CAAI,IAAS,KAAA,gBAAA;AAAA,EACb,IAAI,IAAS,KAAA,YAAA,CAAA;AAEf;;ACgCgB,SAAA,cAAA,CACf,SACA,GACqB,EAAA;AAErB,EAAM,MAAA,UAAA,GAAa,IAAI,WAAY,EAAA,CAAA;AACnC,EAAA,KAAA,MAAW,CAAC,CAAG,EAAA,CAAC,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAO,CAAG,EAAA;AAC7C,IAAI,IAAA,CAAA,CAAE,WAAY,EAAA,KAAM,UAAY,EAAA;AACnC,MAAO,OAAA,CAAA,CAAA;AAAA,KACR;AAAA,GACD;AACD;;AC5CA,eAAsB,iBAAiB,GAAkC,EAAA;AACxE,EAAA,IAAI,OAAO,IAAM,EAAA;AAChB,IAAO,OAAA,GAAA,CAAA;AAAA,GACR;AAEA,EAAM,MAAA,GAAA,GAAM,IAAI,GAAA,CAAI,GAAG,CAAA,CAAA;AACvB,EAAI,IAAA,CAAC,YAAa,CAAA,GAAG,CAAG,EAAA;AAEvB,IAAO,OAAA,GAAA,CAAA;AAAA,GACR;AACA,EAAA,IAAI,GAAI,CAAA,QAAA,KAAa,OAAW,IAAA,GAAA,CAAI,aAAa,QAAU,EAAA;AAE1D,IAAO,OAAA,GAAA,CAAA;AAAA,GACR;AAEA,EAAA,MAAM,mBAAmB,qBAAsB,EAAA,CAAA;AAC/C,EAAA,IAAI,oBAAoB,IAAM,EAAA;AAE7B,IAAO,OAAA,GAAA,CAAA;AAAA,GACR;AAEA,EAAA,MAAM,OAAO,GAAI,CAAA,QAAA,CAAA;AACjB,EAAA,OAAO,iBACL,WAAY,CAAA;AAAA,IACZ,MAAQ,EAAA,KAAA;AAAA,IACR,IAAA;AAAA,IACA,SAAS,EAAC;AAAA,IACV,YAAc,EAAA,EAAA;AAAA,GACd,CAAA,CACA,IAAK,CAAA,CAAC,QAAa,KAAA;AACnB,IAAI,IAAA,QAAA,CAAS,WAAW,GAAK,EAAA;AAC5B,MAAM,MAAA,IAAI,KAAM,CAAA,CAAA,mBAAA,EAAsB,IAA4B,CAAA,sBAAA,CAAA,CAAA,CAAA;AAAA,KACnE;AACA,IAAA,MAAM,OAAO,IAAI,IAAA,CAAK,CAAC,QAAA,CAAS,IAAI,CAAG,EAAA;AAAA,MACtC,IAAM,EAAA,cAAA,CAAe,QAAS,CAAA,OAAA,EAAS,cAAc,CAAA;AAAA,KACrD,CAAA,CAAA;AACD,IAAM,MAAA,OAAA,GAAU,GAAI,CAAA,eAAA,CAAgB,IAAI,CAAA,CAAA;AACxC,IAAO,OAAA,OAAA,CAAA;AAAA,GACP,CAAA,CAAA;AACH;;;;"}
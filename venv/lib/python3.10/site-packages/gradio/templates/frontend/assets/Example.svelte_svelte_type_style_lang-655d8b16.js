import { r as resolve_wasm_src } from './file-url-a54881a3.js';

/* home/runner/work/gradio/gradio/js/image/shared/Image.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	assign,
	compute_rest_props,
	detach,
	element,
	exclude_internal_props,
	get_spread_update,
	init,
	insert,
	noop,
	safe_not_equal,
	set_attributes,
	src_url_equal
} = window.__gradio__svelte__internal;
function create_fragment(ctx) {
	let img;
	let img_src_value;

	let img_levels = [
		{
			src: img_src_value = /*resolved_src*/ ctx[0]
		},
		/*$$restProps*/ ctx[1]
	];

	let img_data = {};

	for (let i = 0; i < img_levels.length; i += 1) {
		img_data = assign(img_data, img_levels[i]);
	}

	return {
		c() {
			img = element("img");
			set_attributes(img, img_data);
		},
		m(target, anchor) {
			insert(target, img, anchor);
		},
		p(ctx, [dirty]) {
			set_attributes(img, img_data = get_spread_update(img_levels, [
				dirty & /*resolved_src*/ 1 && !src_url_equal(img.src, img_src_value = /*resolved_src*/ ctx[0]) && { src: img_src_value },
				dirty & /*$$restProps*/ 2 && /*$$restProps*/ ctx[1]
			]));
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) {
				detach(img);
			}
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	const omit_props_names = ["src"];
	let $$restProps = compute_rest_props($$props, omit_props_names);
	let { src = undefined } = $$props;
	let resolved_src;

	// The `src` prop can be updated before the Promise from `resolve_wasm_src` is resolved.
	// In such a case, the resolved value for the old `src` has to be discarded,
	// This variable `latest_src` is used to pick up only the value resolved for the latest `src` prop.
	let latest_src;

	$$self.$$set = $$new_props => {
		$$props = assign(assign({}, $$props), exclude_internal_props($$new_props));
		$$invalidate(1, $$restProps = compute_rest_props($$props, omit_props_names));
		if ('src' in $$new_props) $$invalidate(2, src = $$new_props.src);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*src, latest_src*/ 12) {
			{
				// In normal (non-Wasm) Gradio, the `<img>` element should be rendered with the passed `src` props immediately
				// without waiting for `resolve_wasm_src()` to resolve.
				// If it waits, a black image is displayed until the async task finishes
				// and it leads to undesirable flickering.
				// So set `src` to `resolved_src` here.
				$$invalidate(0, resolved_src = src);

				$$invalidate(3, latest_src = src);
				const resolving_src = src;

				resolve_wasm_src(resolving_src).then(s => {
					if (latest_src === resolving_src) {
						$$invalidate(0, resolved_src = s);
					}
				});
			}
		}
	};

	return [resolved_src, $$restProps, src, latest_src];
}

class Image extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { src: 2 });
	}
}

const Image$1 = Image;

const Example_svelte_svelte_type_style_lang = '';

export { Image$1 as I };
//# sourceMappingURL=Example.svelte_svelte_type_style_lang-655d8b16.js.map

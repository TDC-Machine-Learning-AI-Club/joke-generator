import './Index-a77cc637.js';
import { U as Upload, I as ImagePaste } from './Upload-c5c1b405.js';
import './Button-ab11cb83.js';

/* home/runner/work/gradio/gradio/js/atoms/src/UploadText.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	append,
	attr,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_else_block(ctx) {
	let uploadicon;
	let current;
	uploadicon = new Upload({});

	return {
		c() {
			create_component(uploadicon.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadicon, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(uploadicon.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadicon.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadicon, detaching);
		}
	};
}

// (19:2) {#if type === "clipboard"}
function create_if_block_1(ctx) {
	let imagepaste;
	let current;
	imagepaste = new ImagePaste({});

	return {
		c() {
			create_component(imagepaste.$$.fragment);
		},
		m(target, anchor) {
			mount_component(imagepaste, target, anchor);
			current = true;
		},
		i(local) {
			if (current) return;
			transition_in(imagepaste.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(imagepaste.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(imagepaste, detaching);
		}
	};
}

// (28:1) {#if mode !== "short"}
function create_if_block(ctx) {
	let span;
	let t0;
	let t1_value = /*i18n*/ ctx[1]("common.or") + "";
	let t1;
	let t2;
	let t3;
	let t4_value = (/*message*/ ctx[2] || /*i18n*/ ctx[1]("upload_text.click_to_upload")) + "";
	let t4;

	return {
		c() {
			span = element("span");
			t0 = text("- ");
			t1 = text(t1_value);
			t2 = text(" -");
			t3 = space();
			t4 = text(t4_value);
			attr(span, "class", "or svelte-b0hvie");
		},
		m(target, anchor) {
			insert(target, span, anchor);
			append(span, t0);
			append(span, t1);
			append(span, t2);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*i18n*/ 2 && t1_value !== (t1_value = /*i18n*/ ctx[1]("common.or") + "")) set_data(t1, t1_value);
			if (dirty & /*message, i18n*/ 6 && t4_value !== (t4_value = (/*message*/ ctx[2] || /*i18n*/ ctx[1]("upload_text.click_to_upload")) + "")) set_data(t4, t4_value);
		},
		d(detaching) {
			if (detaching) {
				detach(span);
				detach(t3);
				detach(t4);
			}
		}
	};
}

function create_fragment(ctx) {
	let div;
	let span;
	let current_block_type_index;
	let if_block0;
	let t0;
	let t1_value = /*i18n*/ ctx[1](/*defs*/ ctx[5][/*type*/ ctx[0]] || /*defs*/ ctx[5].file) + "";
	let t1;
	let t2;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*type*/ ctx[0] === "clipboard") return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	let if_block1 = /*mode*/ ctx[3] !== "short" && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			span = element("span");
			if_block0.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			if (if_block1) if_block1.c();
			attr(span, "class", "icon-wrap svelte-b0hvie");
			toggle_class(span, "hovered", /*hovered*/ ctx[4]);
			attr(div, "class", "wrap svelte-b0hvie");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, span);
			if_blocks[current_block_type_index].m(span, null);
			append(div, t0);
			append(div, t1);
			append(div, t2);
			if (if_block1) if_block1.m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx);

			if (current_block_type_index !== previous_block_index) {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				}

				transition_in(if_block0, 1);
				if_block0.m(span, null);
			}

			if (!current || dirty & /*hovered*/ 16) {
				toggle_class(span, "hovered", /*hovered*/ ctx[4]);
			}

			if ((!current || dirty & /*i18n, type*/ 3) && t1_value !== (t1_value = /*i18n*/ ctx[1](/*defs*/ ctx[5][/*type*/ ctx[0]] || /*defs*/ ctx[5].file) + "")) set_data(t1, t1_value);

			if (/*mode*/ ctx[3] !== "short") {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach(div);
			}

			if_blocks[current_block_type_index].d();
			if (if_block1) if_block1.d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { type = "file" } = $$props;
	let { i18n } = $$props;
	let { message = undefined } = $$props;
	let { mode = "full" } = $$props;
	let { hovered = false } = $$props;

	const defs = {
		image: "upload_text.drop_image",
		video: "upload_text.drop_video",
		audio: "upload_text.drop_audio",
		file: "upload_text.drop_file",
		csv: "upload_text.drop_csv",
		clipboard: "upload_text.paste_clipboard"
	};

	$$self.$$set = $$props => {
		if ('type' in $$props) $$invalidate(0, type = $$props.type);
		if ('i18n' in $$props) $$invalidate(1, i18n = $$props.i18n);
		if ('message' in $$props) $$invalidate(2, message = $$props.message);
		if ('mode' in $$props) $$invalidate(3, mode = $$props.mode);
		if ('hovered' in $$props) $$invalidate(4, hovered = $$props.hovered);
	};

	return [type, i18n, message, mode, hovered, defs];
}

class UploadText extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			type: 0,
			i18n: 1,
			message: 2,
			mode: 3,
			hovered: 4
		});
	}
}

export { UploadText as U };
//# sourceMappingURL=UploadText-2e352a35.js.map

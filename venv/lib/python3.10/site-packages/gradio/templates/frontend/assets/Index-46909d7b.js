import { a as Button } from './Button-ab11cb83.js';
import { g as get_fetchable_url_or_file, p as prepare_files, u as upload } from './index-9dc32a9d.js';
import './Index-a77cc637.js';
import './svelte/svelte.js';

const UploadButton_svelte_svelte_type_style_lang = '';

/* home/runner/work/gradio/gradio/js/uploadbutton/shared/UploadButton.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent: SvelteComponent$1,
	attr,
	binding_callbacks,
	create_component: create_component$1,
	create_slot,
	destroy_component: destroy_component$1,
	detach: detach$1,
	element,
	get_all_dirty_from_scope,
	get_slot_changes,
	init: init$1,
	insert: insert$1,
	listen,
	mount_component: mount_component$1,
	run_all,
	safe_not_equal: safe_not_equal$1,
	space,
	src_url_equal,
	transition_in: transition_in$1,
	transition_out: transition_out$1,
	update_slot_base
} = window.__gradio__svelte__internal;
const { tick, createEventDispatcher } = window.__gradio__svelte__internal;
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let img_alt_value;

	return {
		c() {
			img = element("img");
			attr(img, "class", "button-icon svelte-1rvxzzt");
			if (!src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[14])) attr(img, "src", img_src_value);
			attr(img, "alt", img_alt_value = `${/*value*/ ctx[0]} icon`);
		},
		m(target, anchor) {
			insert$1(target, img, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*icon_path*/ 16384 && !src_url_equal(img.src, img_src_value = /*icon_path*/ ctx[14])) {
				attr(img, "src", img_src_value);
			}

			if (dirty & /*value*/ 1 && img_alt_value !== (img_alt_value = `${/*value*/ ctx[0]} icon`)) {
				attr(img, "alt", img_alt_value);
			}
		},
		d(detaching) {
			if (detaching) {
				detach$1(img);
			}
		}
	};
}

// (80:0) <BaseButton  {size}  {variant}  {elem_id}  {elem_classes}  {visible}  on:click={openFileUpload}  {scale}  {min_width}  {disabled} >
function create_default_slot$1(ctx) {
	let t;
	let current;
	let if_block = /*icon*/ ctx[7] && create_if_block(ctx);
	const default_slot_template = /*#slots*/ ctx[20].default;
	const default_slot = create_slot(default_slot_template, ctx, /*$$scope*/ ctx[22], null);

	return {
		c() {
			if (if_block) if_block.c();
			t = space();
			if (default_slot) default_slot.c();
		},
		m(target, anchor) {
			if (if_block) if_block.m(target, anchor);
			insert$1(target, t, anchor);

			if (default_slot) {
				default_slot.m(target, anchor);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (/*icon*/ ctx[7]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(t.parentNode, t);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			if (default_slot) {
				if (default_slot.p && (!current || dirty & /*$$scope*/ 4194304)) {
					update_slot_base(
						default_slot,
						default_slot_template,
						ctx,
						/*$$scope*/ ctx[22],
						!current
						? get_all_dirty_from_scope(/*$$scope*/ ctx[22])
						: get_slot_changes(default_slot_template, /*$$scope*/ ctx[22], dirty, null),
						null
					);
				}
			}
		},
		i(local) {
			if (current) return;
			transition_in$1(default_slot, local);
			current = true;
		},
		o(local) {
			transition_out$1(default_slot, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(t);
			}

			if (if_block) if_block.d(detaching);
			if (default_slot) default_slot.d(detaching);
		}
	};
}

function create_fragment$1(ctx) {
	let input;
	let input_multiple_value;
	let input_webkitdirectory_value;
	let input_mozdirectory_value;
	let input_data_testid_value;
	let t;
	let basebutton;
	let current;
	let mounted;
	let dispose;

	basebutton = new Button({
			props: {
				size: /*size*/ ctx[6],
				variant: /*variant*/ ctx[10],
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				visible: /*visible*/ ctx[3],
				scale: /*scale*/ ctx[8],
				min_width: /*min_width*/ ctx[9],
				disabled: /*disabled*/ ctx[11],
				$$slots: { default: [create_default_slot$1] },
				$$scope: { ctx }
			}
		});

	basebutton.$on("click", /*openFileUpload*/ ctx[15]);

	return {
		c() {
			input = element("input");
			t = space();
			create_component$1(basebutton.$$.fragment);
			attr(input, "class", "hide svelte-1rvxzzt");
			attr(input, "accept", /*accept_file_types*/ ctx[13]);
			attr(input, "type", "file");
			input.multiple = input_multiple_value = /*file_count*/ ctx[5] === "multiple" || undefined;
			attr(input, "webkitdirectory", input_webkitdirectory_value = /*file_count*/ ctx[5] === "directory" || undefined);
			attr(input, "mozdirectory", input_mozdirectory_value = /*file_count*/ ctx[5] === "directory" || undefined);
			attr(input, "data-testid", input_data_testid_value = "" + (/*label*/ ctx[4] + "-upload-button"));
		},
		m(target, anchor) {
			insert$1(target, input, anchor);
			/*input_binding*/ ctx[21](input);
			insert$1(target, t, anchor);
			mount_component$1(basebutton, target, anchor);
			current = true;

			if (!mounted) {
				dispose = [
					listen(input, "change", /*loadFilesFromUpload*/ ctx[16]),
					listen(input, "click", clearInputValue)
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*accept_file_types*/ 8192) {
				attr(input, "accept", /*accept_file_types*/ ctx[13]);
			}

			if (!current || dirty & /*file_count*/ 32 && input_multiple_value !== (input_multiple_value = /*file_count*/ ctx[5] === "multiple" || undefined)) {
				input.multiple = input_multiple_value;
			}

			if (!current || dirty & /*file_count*/ 32 && input_webkitdirectory_value !== (input_webkitdirectory_value = /*file_count*/ ctx[5] === "directory" || undefined)) {
				attr(input, "webkitdirectory", input_webkitdirectory_value);
			}

			if (!current || dirty & /*file_count*/ 32 && input_mozdirectory_value !== (input_mozdirectory_value = /*file_count*/ ctx[5] === "directory" || undefined)) {
				attr(input, "mozdirectory", input_mozdirectory_value);
			}

			if (!current || dirty & /*label*/ 16 && input_data_testid_value !== (input_data_testid_value = "" + (/*label*/ ctx[4] + "-upload-button"))) {
				attr(input, "data-testid", input_data_testid_value);
			}

			const basebutton_changes = {};
			if (dirty & /*size*/ 64) basebutton_changes.size = /*size*/ ctx[6];
			if (dirty & /*variant*/ 1024) basebutton_changes.variant = /*variant*/ ctx[10];
			if (dirty & /*elem_id*/ 2) basebutton_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) basebutton_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*visible*/ 8) basebutton_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*scale*/ 256) basebutton_changes.scale = /*scale*/ ctx[8];
			if (dirty & /*min_width*/ 512) basebutton_changes.min_width = /*min_width*/ ctx[9];
			if (dirty & /*disabled*/ 2048) basebutton_changes.disabled = /*disabled*/ ctx[11];

			if (dirty & /*$$scope, icon_path, value, icon*/ 4210817) {
				basebutton_changes.$$scope = { dirty, ctx };
			}

			basebutton.$set(basebutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in$1(basebutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out$1(basebutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) {
				detach$1(input);
				detach$1(t);
			}

			/*input_binding*/ ctx[21](null);
			destroy_component$1(basebutton, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

function clearInputValue(e) {
	const target = e.target;
	if (target.value) target.value = "";
}

function instance$1($$self, $$props, $$invalidate) {
	let icon_path;
	let { $$slots: slots = {}, $$scope } = $$props;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { label } = $$props;
	let { value } = $$props;
	let { file_count } = $$props;
	let { file_types = [] } = $$props;
	let { root } = $$props;
	let { size = "lg" } = $$props;
	let { icon = null } = $$props;
	let { scale = null } = $$props;
	let { min_width = undefined } = $$props;
	let { variant = "secondary" } = $$props;
	let { disabled = false } = $$props;
	let { proxy_url = null } = $$props;
	const dispatch = createEventDispatcher();
	let hidden_upload;
	let accept_file_types;

	if (file_types == null) {
		accept_file_types = null;
	} else {
		file_types = file_types.map(x => {
			if (x.startsWith(".")) {
				return x;
			}

			return x + "/*";
		});

		accept_file_types = file_types.join(", ");
	}

	function openFileUpload() {
		dispatch("click");
		hidden_upload.click();
	}

	async function loadFiles(files) {
		let _files = Array.from(files);

		if (!files.length) {
			return;
		}

		if (file_count === "single") {
			_files = [files[0]];
		}

		let all_file_data = await prepare_files(_files);
		await tick();
		all_file_data = (await upload(all_file_data, root))?.filter(x => x !== null);

		$$invalidate(0, value = file_count === "single"
		? all_file_data?.[0]
		: all_file_data);

		dispatch("change", value);
		dispatch("upload", value);
	}

	async function loadFilesFromUpload(e) {
		const target = e.target;
		if (!target.files) return;
		await loadFiles(target.files);
	}

	function input_binding($$value) {
		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
			hidden_upload = $$value;
			$$invalidate(12, hidden_upload);
		});
	}

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('file_count' in $$props) $$invalidate(5, file_count = $$props.file_count);
		if ('file_types' in $$props) $$invalidate(17, file_types = $$props.file_types);
		if ('root' in $$props) $$invalidate(18, root = $$props.root);
		if ('size' in $$props) $$invalidate(6, size = $$props.size);
		if ('icon' in $$props) $$invalidate(7, icon = $$props.icon);
		if ('scale' in $$props) $$invalidate(8, scale = $$props.scale);
		if ('min_width' in $$props) $$invalidate(9, min_width = $$props.min_width);
		if ('variant' in $$props) $$invalidate(10, variant = $$props.variant);
		if ('disabled' in $$props) $$invalidate(11, disabled = $$props.disabled);
		if ('proxy_url' in $$props) $$invalidate(19, proxy_url = $$props.proxy_url);
		if ('$$scope' in $$props) $$invalidate(22, $$scope = $$props.$$scope);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*icon, root, proxy_url*/ 786560) {
			$$invalidate(14, icon_path = get_fetchable_url_or_file(icon, root, proxy_url));
		}
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		label,
		file_count,
		size,
		icon,
		scale,
		min_width,
		variant,
		disabled,
		hidden_upload,
		accept_file_types,
		icon_path,
		openFileUpload,
		loadFilesFromUpload,
		file_types,
		root,
		proxy_url,
		slots,
		input_binding,
		$$scope
	];
}

class UploadButton extends SvelteComponent$1 {
	constructor(options) {
		super();

		init$1(this, options, instance$1, create_fragment$1, safe_not_equal$1, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			label: 4,
			value: 0,
			file_count: 5,
			file_types: 17,
			root: 18,
			size: 6,
			icon: 7,
			scale: 8,
			min_width: 9,
			variant: 10,
			disabled: 11,
			proxy_url: 19
		});
	}
}

const UploadButton$1 = UploadButton;

/* home/runner/work/gradio/gradio/js/uploadbutton/Index.svelte generated by Svelte v4.2.2 */
const {
	SvelteComponent,
	create_component,
	destroy_component,
	detach,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	text,
	transition_in,
	transition_out
} = window.__gradio__svelte__internal;
function create_default_slot(ctx) {
	let t_value = /*gradio*/ ctx[13].i18n(/*label*/ ctx[4]) + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*gradio, label*/ 8208 && t_value !== (t_value = /*gradio*/ ctx[13].i18n(/*label*/ ctx[4]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) {
				detach(t);
			}
		}
	};
}

function create_fragment(ctx) {
	let uploadbutton;
	let current;

	uploadbutton = new UploadButton$1({
			props: {
				elem_id: /*elem_id*/ ctx[1],
				elem_classes: /*elem_classes*/ ctx[2],
				visible: /*visible*/ ctx[3],
				file_count: /*file_count*/ ctx[5],
				file_types: /*file_types*/ ctx[6],
				size: /*size*/ ctx[8],
				scale: /*scale*/ ctx[9],
				icon: /*icon*/ ctx[10],
				min_width: /*min_width*/ ctx[11],
				root: /*root*/ ctx[7],
				value: /*value*/ ctx[0],
				disabled: /*disabled*/ ctx[15],
				variant: /*variant*/ ctx[12],
				label: /*label*/ ctx[4],
				proxy_url: /*proxy_url*/ ctx[14],
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	uploadbutton.$on("click", /*click_handler*/ ctx[18]);
	uploadbutton.$on("change", /*change_handler*/ ctx[19]);
	uploadbutton.$on("upload", /*upload_handler*/ ctx[20]);

	return {
		c() {
			create_component(uploadbutton.$$.fragment);
		},
		m(target, anchor) {
			mount_component(uploadbutton, target, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const uploadbutton_changes = {};
			if (dirty & /*elem_id*/ 2) uploadbutton_changes.elem_id = /*elem_id*/ ctx[1];
			if (dirty & /*elem_classes*/ 4) uploadbutton_changes.elem_classes = /*elem_classes*/ ctx[2];
			if (dirty & /*visible*/ 8) uploadbutton_changes.visible = /*visible*/ ctx[3];
			if (dirty & /*file_count*/ 32) uploadbutton_changes.file_count = /*file_count*/ ctx[5];
			if (dirty & /*file_types*/ 64) uploadbutton_changes.file_types = /*file_types*/ ctx[6];
			if (dirty & /*size*/ 256) uploadbutton_changes.size = /*size*/ ctx[8];
			if (dirty & /*scale*/ 512) uploadbutton_changes.scale = /*scale*/ ctx[9];
			if (dirty & /*icon*/ 1024) uploadbutton_changes.icon = /*icon*/ ctx[10];
			if (dirty & /*min_width*/ 2048) uploadbutton_changes.min_width = /*min_width*/ ctx[11];
			if (dirty & /*root*/ 128) uploadbutton_changes.root = /*root*/ ctx[7];
			if (dirty & /*value*/ 1) uploadbutton_changes.value = /*value*/ ctx[0];
			if (dirty & /*disabled*/ 32768) uploadbutton_changes.disabled = /*disabled*/ ctx[15];
			if (dirty & /*variant*/ 4096) uploadbutton_changes.variant = /*variant*/ ctx[12];
			if (dirty & /*label*/ 16) uploadbutton_changes.label = /*label*/ ctx[4];
			if (dirty & /*proxy_url*/ 16384) uploadbutton_changes.proxy_url = /*proxy_url*/ ctx[14];

			if (dirty & /*$$scope, gradio, label*/ 2105360) {
				uploadbutton_changes.$$scope = { dirty, ctx };
			}

			uploadbutton.$set(uploadbutton_changes);
		},
		i(local) {
			if (current) return;
			transition_in(uploadbutton.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(uploadbutton.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(uploadbutton, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let disabled;
	let { elem_id = "" } = $$props;
	let { elem_classes = [] } = $$props;
	let { visible = true } = $$props;
	let { label } = $$props;
	let { value } = $$props;
	let { file_count } = $$props;
	let { file_types = [] } = $$props;
	let { root } = $$props;
	let { size = "lg" } = $$props;
	let { scale = null } = $$props;
	let { icon = null } = $$props;
	let { min_width = undefined } = $$props;
	let { variant = "secondary" } = $$props;
	let { gradio } = $$props;
	let { interactive } = $$props;
	let { proxy_url = null } = $$props;

	async function handle_event(detail, event) {
		$$invalidate(0, value = detail);
		gradio.dispatch(event);
	}

	const click_handler = () => gradio.dispatch("click");
	const change_handler = ({ detail }) => handle_event(detail, "change");
	const upload_handler = ({ detail }) => handle_event(detail, "upload");

	$$self.$$set = $$props => {
		if ('elem_id' in $$props) $$invalidate(1, elem_id = $$props.elem_id);
		if ('elem_classes' in $$props) $$invalidate(2, elem_classes = $$props.elem_classes);
		if ('visible' in $$props) $$invalidate(3, visible = $$props.visible);
		if ('label' in $$props) $$invalidate(4, label = $$props.label);
		if ('value' in $$props) $$invalidate(0, value = $$props.value);
		if ('file_count' in $$props) $$invalidate(5, file_count = $$props.file_count);
		if ('file_types' in $$props) $$invalidate(6, file_types = $$props.file_types);
		if ('root' in $$props) $$invalidate(7, root = $$props.root);
		if ('size' in $$props) $$invalidate(8, size = $$props.size);
		if ('scale' in $$props) $$invalidate(9, scale = $$props.scale);
		if ('icon' in $$props) $$invalidate(10, icon = $$props.icon);
		if ('min_width' in $$props) $$invalidate(11, min_width = $$props.min_width);
		if ('variant' in $$props) $$invalidate(12, variant = $$props.variant);
		if ('gradio' in $$props) $$invalidate(13, gradio = $$props.gradio);
		if ('interactive' in $$props) $$invalidate(17, interactive = $$props.interactive);
		if ('proxy_url' in $$props) $$invalidate(14, proxy_url = $$props.proxy_url);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*interactive*/ 131072) {
			$$invalidate(15, disabled = !interactive);
		}
	};

	return [
		value,
		elem_id,
		elem_classes,
		visible,
		label,
		file_count,
		file_types,
		root,
		size,
		scale,
		icon,
		min_width,
		variant,
		gradio,
		proxy_url,
		disabled,
		handle_event,
		interactive,
		click_handler,
		change_handler,
		upload_handler
	];
}

class Index extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			elem_id: 1,
			elem_classes: 2,
			visible: 3,
			label: 4,
			value: 0,
			file_count: 5,
			file_types: 6,
			root: 7,
			size: 8,
			scale: 9,
			icon: 10,
			min_width: 11,
			variant: 12,
			gradio: 13,
			interactive: 17,
			proxy_url: 14
		});
	}
}

export { UploadButton$1 as BaseUploadButton, Index as default };
//# sourceMappingURL=Index-46909d7b.js.map
